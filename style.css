@import url('https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Lora:ital,wght@0,400;0,600;1,400&display=swap');

:root {
    --primary-color: #ff8c00;
    --background-color: #0d0d0d;
    --surface-color: #1a1a1a;
    --text-color: #c5c5c5;
    --border-color: #4a2a00;
}

body {
    font-family: 'Lora', serif;
    background-color: var(--background-color);
    color: var(--text-color);
    margin: 0;
    padding: 15px;
    display: flex;
    justify-content: center;
    align-items: flex-start; /* Align to top for long mobile screens */
    min-height: 100vh;
    box-sizing: border-box;
}

#game-container {
    width: 100%;
    max-width: 1200px;
    border: 1px solid var(--border-color);
    background-color: var(--surface-color);
    box-shadow: 0 0 25px rgba(0, 0, 0, 0.5);
    border-radius: 8px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
}

#header {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    padding: 10px 20px;
    background-color: #111;
    border-bottom: 2px solid var(--border-color);
}

#game-title {
    font-family: 'Cinzel', serif;
    color: var(--primary-color);
    margin: 5px 0;
    font-size: 24px;
}

#nav-menu button {
    margin: 5px 0 5px 10px;
    background-color: #333;
    color: #ddd;
    border: 1px solid #555;
    padding: 8px 12px;
    cursor: pointer;
    border-radius: 4px;
    transition: background-color 0.3s, color 0.3s;
}

#nav-menu button:hover, #hint-btn:hover {
    background-color: var(--primary-color);
    color: #111;
}

#hint-btn {
    background-color: #384238;
    color: #aae0aa;
    border-color: #526b52;
}

#main-interface {
    display: flex;
    flex-direction: row;
}

#story-panel {
    flex-grow: 1;
    padding: 20px;
}

#room-title {
    font-family: 'Cinzel', serif;
    font-size: 22px;
    color: #ffae42;
    margin: 0;
    border-bottom: 1px solid #333;
    padding-bottom: 10px;
}

#story-text, #feedback-text {
    line-height: 1.7;
    font-size: 16px;
    margin-top: 20px;
}

#feedback-text {
    color: #ffae42;
    font-style: italic;
    border-left: 3px solid var(--border-color);
    padding-left: 15px;
}

.critical-hit {
    font-weight: bold;
    color: #ff4d4d;
    font-size: 1.1em;
}

#choices-buttons {
    margin-top: 20px;
}

#choices-buttons button {
    display: block;
    width: 100%;
    margin: 8px 0;
    padding: 12px 15px;
    font-size: 16px;
    cursor: pointer;
    background-color: #2c2c2c;
    color: var(--text-color);
    border: 1px solid #444;
    border-radius: 5px;
    transition: background-color 0.3s, border-color 0.3s;
    text-align: left;
}

#choices-buttons button.pickup-btn {
    background-color: #2c3e2c;
    border-color: #4a684a;
}

#choices-buttons button:hover {
    background-color: #3a3a3a;
    border-color: var(--primary-color);
}

#side-panel {
    width: 280px;
    flex-shrink: 0;
    background-color: #111;
    padding: 20px;
    border-left: 2px solid var(--border-color);
}

#side-panel h3 {
    font-family: 'Cinzel', serif;
    color: var(--primary-color);
    border-bottom: 1px solid #444;
    padding-bottom: 10px;
    margin-top: 0;
    margin-bottom: 15px;
}

#inventory-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

#inventory-counter {
    font-size: 0.9em;
    color: #888;
}

#health-container {
    margin-bottom: 20px;
}

#health-bar-container {
    width: 100%;
    height: 22px;
    background-color: #444;
    border-radius: 10px;
    border: 1px solid #555;
    margin: 5px 0;
}

#health-bar {
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, #b22222, #dc2f2f);
    border-radius: 8px;
    transition: width 0.5s ease-in-out;
}

#inventory-list { list-style: none; padding: 0; margin: 0; }
#inventory-list li { padding: 10px; border-bottom: 1px solid #333; cursor: pointer; transition: background-color 0.3s; border-radius: 4px; }
#inventory-list li:hover { background-color: #2a2a2a; }

/* Modal Styles */
.hidden { display: none !important; }
#item-modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.8); display: flex; justify-content: center; align-items: center; z-index: 100; padding: 15px; box-sizing: border-box; }
#item-modal-content { background-color: var(--surface-color); padding: 25px; border: 1px solid var(--border-color); border-radius: 8px; width: 100%; max-width: 400px; text-align: center; box-shadow: 0 0 20px rgba(0,0,0,0.5); }
#item-modal-title { font-family: 'Cinzel', serif; color: var(--primary-color); margin-top: 0; }
#item-modal-description { font-style: italic; color: #aaa; margin-bottom: 20px; }
#item-modal-buttons button { margin: 5px; padding: 10px 20px; cursor: pointer; border-radius: 4px; border: 1px solid #555; background-color: #333; color: #ddd; transition: background-color 0.3s; }
#item-modal-buttons button:hover { background-color: var(--primary-color); color: #111; }

/* Mobile Responsiveness */
@media (max-width: 800px) {
    #main-interface {
        flex-direction: column;
    }
    #side-panel {
        width: auto;
        border-left: none;
        border-top: 2px solid var(--border-color);
    }
    #game-title {
        font-size: 20px;
    }
}```

### `script.js` (Final Version)

This file contains all the new logic for the requested features.

```javascript
document.addEventListener('DOMContentLoaded', () => {
    // DOM Elements
    const storyTextEl = document.getElementById('story-text');
    const feedbackTextEl = document.getElementById('feedback-text');
    const roomTitleEl = document.getElementById('room-title');
    const choicesButtonsEl = document.getElementById('choices-buttons');
    const inventoryListEl = document.getElementById('inventory-list');
    const inventoryCounterEl = document.getElementById('inventory-counter');
    const healthBarEl = document.getElementById('health-bar');
    const healthTextEl = document.getElementById('health-text');
    const hintBtn = document.getElementById('hint-btn');
    const restartBtn = document.getElementById('restart-btn');
    const saveBtn = document.getElementById('save-btn');
    const loadBtn = document.getElementById('load-btn');
    const itemModal = document.getElementById('item-modal');
    const itemModalTitle = document.getElementById('item-modal-title');
    const itemModalDescription = document.getElementById('item-modal-description');
    const itemUseBtn = document.getElementById('item-use-btn');
    const itemDropBtn = document.getElementById('item-drop-btn');
    const itemModalCloseBtn = document.getElementById('item-modal-close-btn');

    // Game Constants
    const MAX_INVENTORY_SIZE = 8;
    const CRITICAL_HIT_CHANCE = 0.1; // 10%
    const RANDOM_ENCOUNTER_CHANCE = 0.15; // 15%

    // Game State
    let gameState = {};
    let regenerationInterval = null;

    const getInitialState = () => ({
        player: { health: 100, maxHealth: 100, inventory: [] },
        currentRoom: 'start',
        roomStates: {}, // To track dropped items, e.g., {'maintenanceTunnel': {droppedItems: ['lever handle']}}
        flags: {
            goblinDefeated: false,
            talkedToGhost: false,
            alchemistQuest: 'none',
            leverPuzzleSolved: false,
            spiderDefeated: false,
            archivesDrained: false,
        }
    });

    // Item Definitions
    const items = {
        'rusty sword': { name: 'Rusty Sword', description: 'Deals moderate damage. A trusty, if ugly, blade.', use: (f) => f.push('This is a weapon. It is automatically used in combat.') },
        'health potion': { name: 'Health Potion', description: 'A swirling red liquid that instantly restores 50 health.', use: (f) => {
            if (gameState.player.health >= gameState.player.maxHealth) { f.push('You are already at full health.'); }
            else { gameState.player.health = Math.min(gameState.player.maxHealth, gameState.player.health + 50); removeItem('health potion'); f.push('You drink the health potion. You recovered 50 health.'); updatePlayerStats(); }
        }},
        'potion of regeneration': { name: 'Potion of Regeneration', description: 'A shimmering green liquid that restores 25 health over 25 seconds.', use: (f) => {
            if (regenerationInterval) { f.push('You are already regenerating.'); return; }
            removeItem('potion of regeneration');
            f.push('You drink the glowing potion. You feel a warmth spread through you.');
            let regenerated = 0;
            regenerationInterval = setInterval(() => {
                if (gameState.player.health >= gameState.player.maxHealth || regenerated >= 25) {
                    clearInterval(regenerationInterval);
                    regenerationInterval = null;
                    return;
                }
                gameState.player.health++;
                regenerated++;
                updatePlayerStats();
            }, 1000);
        }},
        'ornate dagger': { name: 'Ornate Dagger', description: 'A beautifully crafted dagger. Deals significant damage.', use: (f) => f.push('A fine weapon. It is automatically used in combat.') },
        'glowing gem': { name: 'Glowing Gem', description: 'A fist-sized gem that hums with power. This feels like the "Heartstone" the Alchemist\'s notes mentioned.', use: (f) => f.push('The gem hums warmly in your hand, but does nothing by itself.') },
        'master alchemists notes': { name: 'Master Alchemist\'s Notes', description: 'Faded notes confirming the guardian is keyed to a "Heartstone" and will not permit passage to any who do not bear it.', use: (f) => f.push('The notes confirm the guardian needs a "Heartstone".') },
        'spider silk': { name: 'Spider Silk', description: 'A clump of strong, sticky spider silk.', use: (f) => {
            if(gameState.currentRoom === 'alchemistStudy' && gameState.flags.alchemistQuest === 'accepted'){
                removeItem('spider silk'); addItem('potion of regeneration'); gameState.flags.alchemistQuest = 'completed';
                f.push('You give the silk to the Alchemist. "Wonderful!" he cackles, handing you a strange, glowing green potion. "Now I can finish my work."');
                showRoom('alchemistStudy');
            } else { f.push('This silk is strong, but you have no use for it right here.'); }
        }},
        'lever handle': { name: 'Lever Handle', description: 'A heavy iron handle, rusted but solid. It looks like it could fit onto a drainage pump mechanism.', use: (f) => {
            if(gameState.currentRoom === 'floodedArchives' && !gameState.flags.archivesDrained){
                removeItem('lever handle'); gameState.flags.archivesDrained = true;
                f.push('You fit the handle onto the pump and give it a mighty heave. With a groan, the pump activates, and the murky water begins to drain away, revealing a clear path and a previously submerged chest.');
                showRoom('floodedArchives');
            } else { f.push('This handle doesn\'t fit anything here.'); }
        }}
    };

    // --- Core Game Logic ---
    const updatePlayerStats = () => {
        const { health, maxHealth } = gameState.player;
        healthBarEl.style.width = `${(health / maxHealth) * 100}%`;
        healthTextEl.textContent = `${health}/${maxHealth}`;
        updateInventory();
    };

    const addItem = (itemName, feedback) => {
        if (gameState.player.inventory.length >= MAX_INVENTORY_SIZE) {
            feedback.push("Your inventory is full. You can't carry any more.");
            return false;
        }
        if (!gameState.player.inventory.includes(itemName)) {
            gameState.player.inventory.push(itemName);
        }
        updateInventory();
        return true;
    };

    const removeItem = (itemName) => {
        gameState.player.inventory = gameState.player.inventory.filter(item => item !== itemName);
        updateInventory();
    };

    const dropItem = (itemName, feedback) => {
        removeItem(itemName);
        if (!gameState.roomStates[gameState.currentRoom]) {
            gameState.roomStates[gameState.currentRoom] = { droppedItems: [] };
        }
        gameState.roomStates[gameState.currentRoom].droppedItems.push(itemName);
        feedback.push(`You dropped the ${items[itemName].name}.`);
        showRoom(gameState.currentRoom); // Refresh room to show dropped item
    };
    
    const pickupItem = (itemName, feedback) => {
        if (addItem(itemName, feedback)) {
            feedback.push(`You picked up the ${items[itemName].name}.`);
            const roomState = gameState.roomStates[gameState.currentRoom];
            roomState.droppedItems = roomState.droppedItems.filter(i => i !== itemName);
            showRoom(gameState.currentRoom); // Refresh room
        }
    };

    const updateInventory = () => {
        const invSize = gameState.player.inventory.length;
        inventoryCounterEl.textContent = `${invSize} / ${MAX_INVENTORY_SIZE}`;
        inventoryListEl.innerHTML = invSize === 0 ? '<li>Your inventory is empty.</li>' : gameState.player.inventory.map(itemName => `<li onclick="window.openItemModal('${itemName}')">${items[itemName].name}</li>`).join('');
    };

    const showFeedback = (feedback) => {
        feedbackTextEl.innerHTML = feedback.length > 0 ? feedback.join('<br>') : '';
    };

    const showRoom = (roomId) => {
        const PATROL_ZONES = ['eastHallway', 'westHallway', 'maintenanceTunnel'];
        if (PATROL_ZONES.includes(roomId) && Math.random() < RANDOM_ENCOUNTER_CHANCE) {
            showFeedback(["You've been ambushed!"]);
            setTimeout(() => startCombat(
                { name: 'Skulking Goblin', health: 40, attack: 12, description: 'A mangy goblin that leaped from the shadows!' },
                roomId // Return to the room after combat
            ), 1000);
            return;
        }

        const room = rooms[roomId];
        if (!room) return;

        gameState.currentRoom = roomId;
        roomTitleEl.textContent = room.title;
        storyTextEl.innerHTML = typeof room.description === 'function' ? room.description() : room.description;
        feedbackTextEl.innerHTML = '';
        choicesButtonsEl.innerHTML = '';

        room.choices.filter(c => !c.condition || c.condition(gameState)).forEach(c => {
            const button = document.createElement('button');
            button.innerHTML = c.text;
            button.onclick = () => { const f = []; c.action(f); showFeedback(f); };
            choicesButtonsEl.appendChild(button);
        });

        const roomState = gameState.roomStates[roomId];
        if (roomState && roomState.droppedItems) {
            roomState.droppedItems.forEach(itemName => {
                const button = document.createElement('button');
                button.innerHTML = `Pick up ${items[itemName].name}`;
                button.className = 'pickup-btn';
                button.onclick = () => { const f = []; pickupItem(itemName, f); showFeedback(f); };
                choicesButtonsEl.appendChild(button);
            });
        }
        updatePlayerStats();
    };

    const startCombat = (enemy, postCombatRoomId) => {
        const originalRoomId = gameState.currentRoom;
        gameState.currentRoom = 'inCombat';
        let currentEnemy = { ...enemy };

        const renderCombatUI = () => {
            roomTitleEl.textContent = `In Combat with ${currentEnemy.name}!`;
            storyTextEl.innerHTML = `<p>${currentEnemy.description}</p><p>The ${currentEnemy.name} has ${currentEnemy.health} health remaining.</p>`;
            choicesButtonsEl.innerHTML = '';
            
            const attackBtn = document.createElement('button');
            attackBtn.textContent = 'Attack';
            attackBtn.onclick = playerTurn; choicesButtonsEl.appendChild(attackBtn);

            gameState.player.inventory.forEach(item => {
                if (item.includes('potion')) {
                    const useBtn = document.createElement('button');
                    useBtn.textContent = `Use ${items[item].name}`;
                    useBtn.onclick = () => { const f = []; items[item].use(f); showFeedback(f); if (gameState.player.health > 0) setTimeout(enemyTurn, 1000); };
                    choicesButtonsEl.appendChild(useBtn);
                }
            });

            const fleeBtn = document.createElement('button');
            fleeBtn.textContent = 'Flee';
            fleeBtn.onclick = () => {
                if (Math.random() < 0.5) { showFeedback(['You successfully escaped!']); setTimeout(() => showRoom(originalRoomId), 1000); }
                else { showFeedback(['Your attempt to flee failed!']); setTimeout(enemyTurn, 1000); }
            }; choicesButtonsEl.appendChild(fleeBtn);
        };

        const playerTurn = () => {
            if (Math.random() < CRITICAL_HIT_CHANCE) {
                currentEnemy.health = 0;
                showFeedback(['<span class="critical-hit">CRITICAL HIT!</span> You deliver a devastating blow, defeating the enemy instantly!']);
                endCombat();
                return;
            }

            const playerDamage = gameState.player.inventory.includes('ornate dagger') ? 25 : gameState.player.inventory.includes('rusty sword') ? 15 : 8;
            const damage = Math.floor(Math.random() * 10) + playerDamage;
            currentEnemy.health -= damage;
            showFeedback([`You strike the ${currentEnemy.name} for ${damage} damage.`]);
            if (currentEnemy.health <= 0) { endCombat(); } else { setTimeout(enemyTurn, 1000); }
        };

        const enemyTurn = () => {
            if (gameState.player.health <= 0 || currentEnemy.health <= 0) return;
            const damage = Math.floor(Math.random() * currentEnemy.attack) + 5;
            gameState.player.health -= damage;
            updatePlayerStats();
            showFeedback([`The ${currentEnemy.name} attacks you for ${damage} damage.`]);
            if (gameState.player.health <= 0) { gameOver('You have been slain in battle...'); } else { setTimeout(renderCombatUI, 1000); }
        };

        const endCombat = () => {
            const feedback = [`You have defeated the ${currentEnemy.name}!`];
            if (enemy.flag) gameState.flags[enemy.flag] = true;
            if (enemy.loot) {
                if (addItem(enemy.loot, feedback)) {
                    feedback.push(`The ${currentEnemy.name} dropped a ${items[enemy.loot].name}. You picked it up.`);
                } else {
                    dropItem(enemy.loot, []); // Drop it on the floor if inventory is full
                    feedback.push(`The ${currentEnemy.name} dropped a ${items[enemy.loot].name}, but your inventory is full. It lies on the floor.`);
                }
            }
            showFeedback(feedback);
            setTimeout(() => showRoom(postCombatRoomId), 2000);
        };

        renderCombatUI();
    };

    const gameOver = (message) => {
        if(regenerationInterval) clearInterval(regenerationInterval);
        gameState.currentRoom = 'gameOver';
        roomTitleEl.textContent = 'Game Over';
        storyTextEl.innerHTML = `<p>${message}</p>`;
        feedbackTextEl.innerHTML = ''; choicesButtonsEl.innerHTML = '';
    };

    // --- Modal, Hint, and Save/Load Logic ---
    window.openItemModal = (itemName) => {
        const item = items[itemName];
        itemModalTitle.textContent = item.name;
        itemModalDescription.textContent = item.description;
        itemUseBtn.onclick = () => { const f = []; item.use(f); closeItemModal(); showFeedback(f); };
        itemDropBtn.onclick = () => { const f = []; dropItem(itemName, f); closeItemModal(); showFeedback(f); };
        itemModal.classList.remove('hidden');
    };
    const closeItemModal = () => itemModal.classList.add('hidden');
    itemModalCloseBtn.onclick = closeItemModal;

    const getHint = () => {
        let hint;
        if (gameState.currentRoom === 'stoneGuardian' && !gameState.player.inventory.includes('glowing gem')) { hint = 'The Guardian is impassable. The ghost and notes mentioned a "Heartstone" gem. The ghost said it was hidden "where the starlight could touch it". I should explore the West Wing more thoroughly.'; }
        else if (gameState.currentRoom === 'floodedArchives' && !gameState.flags.archivesDrained && !gameState.player.inventory.includes('lever handle')) { hint = 'This water is too deep. I need to find a way to drain it. There must be a pump mechanism, and it might be missing a part. A maintenance tunnel sounds like a good place to look for spare parts.'; }
        else if (gameState.currentRoom === 'floodedArchives' && !gameState.flags.archivesDrained && gameState.player.inventory.includes('lever handle')) { hint = 'I have the lever handle! I should try using it on the drainage pump in this room.'; }
        else if (gameState.flags.alchemistQuest === 'accepted' && !gameState.player.inventory.includes('spider silk')) { hint = 'The alchemist wants spider silk. I should find and defeat the spider in the East Wing.'; }
        else { hint = 'I should explore all available rooms and interact with everything I can. Sometimes items found in one area are needed in another.'; }
        showFeedback([`Hint: ${hint}`]);
    };

    // --- Game Data: Rooms (no changes from previous version) ---
    const rooms = {
        start: { title: "The Dungeon Entrance", description: "You stand before a heavy wooden door, the entrance to the 'Forgotten Dungeon'. The air is thick with the smell of dust and decay.", choices: [{ text: 'Push open the heavy door', action: () => showRoom('goblinLair') },{ text: 'Look around the entrance area', action: (f) => { if (!gameState.player.inventory.includes('rusty sword')) { if(addItem('rusty sword', f)) f.push('In a corner, you find a Rusty Sword and take it.'); } else { f.push("You've already searched this area."); } }}]},
        goblinLair: { title: "Goblin Guard Post", description: () => gameState.flags.goblinDefeated ? "The corpse of the goblin lies on the stone floor. A path leads deeper into the dungeon." : "You enter a small, damp chamber. A Goblin snarls and raises a crude club.", choices: [{ text: 'Move forward', condition: gs => gs.flags.goblinDefeated, action: () => showRoom('antechamber') },{ text: 'Fight the Goblin', condition: gs => !gs.flags.goblinDefeated, action: () => startCombat({ name: 'Goblin', health: 50, attack: 15, description: 'A vicious little creature.', flag: 'goblinDefeated', loot: 'health potion' }, 'goblinLair') }]},
        antechamber: { title: "The Grand Antechamber", description: "You are in a large, circular hub room. There are three paths: an archway to the East Wing, a sturdy door to the West Wing, and ahead, a colossal stone door watched over by a silent Guardian.", choices: [{ text: 'Enter the East Wing', action: () => showRoom('eastHallway') },{ text: 'Enter the West Wing', action: () => showRoom('westHallway') },{ text: 'Approach the Stone Guardian', action: () => showRoom('stoneGuardian') }]},
        eastHallway: { title: "East Wing Hallway", description: "This hallway smells of chemicals and decay. A tidy-looking door stands to the left, while a crumbling doorway on the right is covered in cobwebs.", choices: [{ text: "Enter the tidy door (Alchemist's Study)", action: () => showRoom('alchemistStudy') },{ text: "Enter the crumbling doorway (Spider's Nest)", action: () => showRoom('spiderNest') },{ text: 'Return to the Antechamber', action: () => showRoom('antechamber') },]},
        alchemistStudy: { title: "Alchemist's Study", description: () => { if(gameState.flags.leverPuzzleSolved) return "The old alchemist is busy at his table, occasionally glancing at the empty hidden compartment in the wall."; switch(gameState.flags.alchemistQuest){ case 'none': return "The room is a mess of broken glass and esoteric charts. A frail, old man looks up. 'A visitor! If you can help me, I may help you. I need fresh Spider Silk for a potion.'"; case 'accepted': return "The old alchemist looks at you expectantly. 'Have you retrieved the Spider Silk?'"; case 'completed': return "The alchemist nods. 'Thank you. Now I can work.' He gestures to levers on the wall. 'A puzzle the Master set for me. Never could figure out the order he scribbled in his ledger.'"; } }, choices: [{ text: 'Accept the quest', condition: gs => gs.flags.alchemistQuest === 'none', action: (f) => { gameState.flags.alchemistQuest = 'accepted'; f.push("'Excellent!' he rasps. 'Find the spiders, bring me their silk!'"); showRoom('alchemistStudy'); }},{ text: 'Interact with the levers', condition: gs => gs.flags.alchemistQuest === 'completed' && !gs.flags.leverPuzzleSolved, action: (f) => { if(addItem('ornate dagger', f)) f.push("You pull the levers: Middle, Right, Left. With a *click*, a stone slab slides away, revealing an Ornate Dagger! You take it."); gameState.flags.leverPuzzleSolved = true; }},{ text: 'Leave the study', action: () => showRoom('eastHallway') }]},
        spiderNest: { title: "Spider's Nest", description: () => gameState.flags.spiderDefeated ? "The giant spider's carcass is sprawled here amidst the thick webs." : "The doorway leads into a dark, web-filled room. A Giant Spider descends from the ceiling.", choices: [{ text: 'Fight the Giant Spider', condition: gs => !gs.flags.spiderDefeated, action: () => startCombat({ name: 'Giant Spider', health: 80, attack: 20, description: 'A horrifyingly large arachnid.', flag: 'spiderDefeated', loot: 'spider silk' }, 'spiderNest') },{ text: 'Leave the nest', action: () => showRoom('eastHallway') }]},
        westHallway: { title: "West Wing Hallway", description: "This part of the dungeon feels older. One path leads to a room from which you can hear dripping water, while another seems to be a simple maintenance tunnel.", choices: [{ text: 'Enter the dripping room (Flooded Archives)', action: () => showRoom('floodedArchives') },{ text: 'Enter the Maintenance Tunnel', action: () => showRoom('maintenanceTunnel') },{ text: 'Return to the Antechamber', action: () => showRoom('antechamber') }]},
        floodedArchives: { title: "The Flooded Archives", description: () => gameState.flags.archivesDrained ? "The water has receded, revealing shelves of ruined books and a clear path. A single, heavy chest sits in the center, now accessible." : "The room is an archive, flooded with murky, knee-deep water. On a patch of dry land, a large, rusted water pump sits silently. The socket for its lever is empty.", choices: [{ text: 'Open the revealed chest', condition: gs => gs.flags.archivesDrained && !gs.player.inventory.includes('master alchemists notes'), action: (f) => { if(addItem('master alchemists notes', f)) f.push("You open the heavy chest. Inside, preserved in oilskin, you find the Master Alchemist's Notes! You take them."); }},{ text: 'Cross the room to the far door', condition: gs => gs.flags.archivesDrained, action: () => showRoom('collapsedObservatory')},{ text: 'Return to the hallway', action: () => showRoom('westHallway') }]},
        maintenanceTunnel: { title: "Maintenance Tunnel", description: "A narrow, grime-covered tunnel. Tools lie scattered on the floor.", choices: [{ text: 'Search the scattered tools', action: (f) => { if(!gameState.player.inventory.includes('lever handle')){ if(addItem('lever handle', f)) f.push('Amongst the debris, you find a heavy, iron Lever Handle. You take it.'); } else { f.push('You find nothing else of use here.'); } }},{ text: 'Return to the hallway', action: () => showRoom('westHallway') }]},
        collapsedObservatory: { title: "Collapsed Observatory", description: "This room was once a grand observatory, but the ceiling has collapsed, leaving a massive hole open to the sky. Starlight filters down, illuminating a pedestal in the center of the room.", choices: [{ text: 'Take the glittering object from the pedestal', condition: gs => !gs.player.inventory.includes('glowing gem'), action: (f) => { if(addItem('glowing gem', f)) f.push("You approach the pedestal and pick up the source of the light: a magnificent, Glowing Gem that hums with energy. You take it."); }},{ text: 'Return to the archives', action: () => showRoom('floodedArchives') }]},
        stoneGuardian: { title: "Before the Stone Guardian", description: "The Stone Guardian is immense, radiating an ancient power. In a corner, a Ghostly Spirit shimmers sorrowfully. The Guardian blocks the final door.", choices: [{ text: 'Present the Glowing Gem', condition: gs => gs.player.inventory.includes('glowing gem'), action: (f) => { f.push("You hold out the Glowing Gem. A cavity opens in the guardian's chest. You place the gem inside, and it flares with light. The guardian steps aside, revealing the exit."); showRoom('exit'); }},{ text: 'Speak to the Ghostly Spirit', action: (f) => { if(!gameState.flags.talkedToGhost){ f.push('"Bound to this place..." it whispers. "The Guardian protects the Master\'s great secret. It was made to see not with eyes, but with the dungeon\'s heart. A gem... a Heartstone... he hid it where the starlight could touch it."'); gameState.flags.talkedToGhost = true; } else { f.push('The spirit swirls mournfully, having no more to say.'); } }},{ text: 'Attack the Guardian', action: (f) => f.push('Your weapon scrapes uselessly against the magical stone.') },{ text: 'Return to the Antechamber', action: () => showRoom('antechamber') }]},
        exit: { title: "The Way Out", description: "The path is clear. A staircase spirals upwards towards natural light. You have found the way out.", choices: [{ text: 'Escape the Dungeon (True Ending)', action: () => gameOver('You ascend into the light, not just as an escapee, but as one who unraveled the dungeon\'s secrets. You leave with both your life and your wisdom. The End.') }]}
    };

    // --- Initialization and Event Listeners ---
    const initGame = () => {
        if (regenerationInterval) clearInterval(regenerationInterval);
        gameState = getInitialState();
        showRoom(gameState.currentRoom);
    };

    restartBtn.addEventListener('click', () => { if (confirm('Are you sure you want to restart?')) { initGame(); } });
    saveBtn.addEventListener('click', () => { try { localStorage.setItem('dungeonGameState', JSON.stringify(gameState)); alert('Game Saved!'); } catch (e) { alert('Could not save game.'); } });
    loadBtn.addEventListener('click', () => {
        const savedState = localStorage.getItem('dungeonGameState');
        if (savedState) {
            if (confirm('Load your saved game?')) {
                if (regenerationInterval) clearInterval(regenerationInterval);
                gameState = JSON.parse(savedState);
                alert('Game Loaded!');
                showRoom(gameState.currentRoom);
            }
        } else { alert('No saved game found.'); }
    });
    hintBtn.addEventListener('click', getHint);

    initGame();
});